//
//  main.swift
//  VulnerableServer
//
//  Created by Jonathon Copeland on 8/27/23.
//

import Foundation
import Swifter
import RNCryptor

// shared types

class loginResponse : Codable{
    public var responseString : String = ""
}

class loginRequest : Codable {
    public var userName : String?
    public var password = ""
}

print("Server Starting...")

var old = termios()
var new = termios()

var shouldRun = true

tcgetattr(STDIN_FILENO, &old)

new = old
new.c_lflag &= ~(UInt(ICANON))
new.c_lflag &= ~(UInt(ECHO))

tcsetattr(STDIN_FILENO, TCSANOW, &new)

let server = HttpServer()

server["/"] = { .ok(.htmlBody("<p>Yay !! Server is running !</p><p> Requesr: \($0)</p>")) }

server["/login"] = { request in
    let response = loginResponse()
    
    do {
        var user = ""
        var pass = ""
        
        var isSafe = true
        
        let body = try JSONDecoder().decode(loginRequest.self, from: Data(request.body))
        
        for (key, value) in request.queryParams {
            if key == "user" {
                user = value
                isSafe = false
            }
        }
        
        if user == "" {
            if let us = body.userName {
                user = us
                response.responseString = "Now that was a safe (ish) login !"
            } else {
                response.responseString = "No username supplied"
            }
        }
        
        if(isSafe) {
            guard let eData = Data.init(base64Encoded: body.password) else {
                return .badRequest(.text("bad data"))
            }
            
            do {
                let dData = try RNCryptor.decrypt(data: eData, withPassword: "MY_SECRET")
                pass = String(data: dData, encoding: .utf8) ?? ""
            }catch {
                response.responseString = "invalid message data"
            }
            
        } else {
            pass = body.password
        }
        
        if(isSafe) {
            response.responseString = "Now that was a safe login !"
        }else {
            response.responseString = "Login succefuly, but that was risky !"
        }
        
        var badUser = false
        if user != "user" {
            badUser = true
            response.responseString = "invalid user name"
        }
        if pass != "12345" && badUser == false{
             response.responseString = "invalid password"
        }

        
    } catch {
        print("failed to decode jason")
        response.responseString = "Body of login was invalid: \(error.localizedDescription)"
    }
    
    do {
        let jsonEncoder = JSONEncoder()
        let jsonData = try jsonEncoder.encode(response)
        return .ok(.data(jsonData, contentType: "application/json"))
    } catch {
        return .internalServerError
    }
}

do {
    try server.start(8080, forceIPv4: true)
    
    print("Server is running, press \"q\" to exit.")

    while shouldRun {
        let c = getchar()
        if c == 113 {
            // quit on 'q'
            break
        }
    }
    
} catch let e {
    print("Server threw exception, \(e)")
}


