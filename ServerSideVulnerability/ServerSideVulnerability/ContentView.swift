//
//  ContentView.swift
//  ServerSideVulnerability
//
//  Created by Jonathon Copeland on 8/27/23.
//

import SwiftUI
import RNCryptor
// shared types

class loginResponse : Codable{
    public var responseString : String = ""
}

class loginRequest : Codable {
    public var userName : String?
    public var password = ""
}

struct ContentView: View {
    
    @State private var user = ""
    @State private var password = ""
    @State private var serverResponse = "ServerResponse"
    
    func fSendInsecureData() -> Void {
        let url = URL(string: "http://localhost:8080/login?user=\(user)")
        
        guard let url = url else {
            print("Error making url")
            return
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        
        do {
            let loginReqeust = loginRequest()
            loginReqeust.password = password
            
            let jsonEncoder = JSONEncoder()
            let jsonData = try jsonEncoder.encode(loginReqeust)
            
            request.httpBody = jsonData
            
            let task = URLSession.shared.dataTask(with: request) { (data, response, error) in
                
                if let error = error {
                    serverResponse = error.localizedDescription
                    return
                }
                
                guard let data = data else {return}
                
                print("response \(String(describing: response)) data \(data)")
                
                do {
                    let res = try JSONDecoder().decode(loginResponse.self, from: data)
                    serverResponse = res.responseString
                } catch let e{
                    serverResponse = e.localizedDescription
                }
            }
            
            task.resume()
        } catch {
            serverResponse = error.localizedDescription
        }
    }
    
    func fSendSecureData() -> Void {
        let url = URL(string: "http://localhost:8080/login")
        
        guard let url = url else {
            print("Error making url")
            return
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        
        do {
            let loginReqeust = loginRequest()
            guard let pData = password.data(using: .utf8) else {
                serverResponse = "Failed to convert password to data"
                return
            }
            let cData = RNCryptor.encrypt(data: pData, withPassword: "MY_SECRET")
            loginReqeust.password = cData.base64EncodedString()
            
            let jsonEncoder = JSONEncoder()
            let jsonData = try jsonEncoder.encode(loginReqeust)
            
            request.httpBody = jsonData
            
            let task = URLSession.shared.dataTask(with: request) { (data, response, error) in
                
                if let error = error {
                    serverResponse = error.localizedDescription
                    return
                }
                
                guard let data = data else {return}
                
                print("response \(String(describing: response)) data \(data)")
                
                do {
                    let res = try JSONDecoder().decode(loginResponse.self, from: data)
                    serverResponse = res.responseString
                } catch let e{
                    serverResponse = e.localizedDescription
                }
            }
            
            task.resume()
            
        } catch {
            serverResponse = error.localizedDescription
        }
    }
    
    var body: some View {
        VStack {
            Text(serverResponse)
            TextField(
                "User: ", text: $user)
            .textInputAutocapitalization(.never)
            .multilineTextAlignment(.center)
            TextField(
                "Password: ", text: $password)
            .textInputAutocapitalization(.never)
            .multilineTextAlignment(.center)
            Button("SendInescureData") {
                fSendInsecureData()
            }
            Button("SendScureData") {
                fSendSecureData()
            }
        }.padding()
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
